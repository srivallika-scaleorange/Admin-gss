import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  Box,
  Typography,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  TextField,
  MenuItem,
  Select,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  Button,
  Chip,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Collapse,
  Pagination,
} from '@mui/material';
import {
  Person,
  CalendarToday,
  CreditCard,
  Search as SearchIcon,
  Cancel,
  Visibility,
  Edit,
  ExpandMore,
  ExpandLess,
  PictureAsPdf,
} from '@mui/icons-material';
import { jsPDF } from 'jspdf';
import { getFirestore, collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';

// Error Boundary Component
class ErrorBoundary extends React.Component {
  state = { hasError: false, error: null };

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  render() {
    if (this.state.hasError) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography color="error" variant="h6">
            Something went wrong
          </Typography>
          <Typography variant="body2" color="textSecondary">
            Please try again or contact support.
          </Typography>
        </Box>
      );
    }
    return this.props.children;
  }
}

// PaymentReceiptPDF Component
const PaymentReceiptPDF = ({
  amount,
  membership_type,
  payment_status,
  transaction_id,
  user_id,
}) => {
  const [userName, setUserName] = useState('N/A');
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState({ show: false, message: '', type: 'error' });

  const fetchUserName = async () => {
    if (!user_id || typeof user_id !== 'string') {
      setUserName('N/A');
      return;
    }
    setLoading(true);
    try {
      const db = getFirestore();
      const usersCollection = collection(db, 'users');
      const userQuery = query(usersCollection, where('email', '==', user_id));
      const querySnapshot = await getDocs(userQuery);
      if (!querySnapshot.empty) {
        const user = querySnapshot.docs[0].data();
        setUserName(user?.name || 'Unknown User');
      } else {
        setUserName('Unknown User');
        showNotification('User not found', 'error');
      }
    } catch (error) {
      console.error('Error fetching user name:', error);
      setUserName('Unknown User');
      showNotification('Failed to fetch user name', 'error');
    } finally {
      setLoading(false);
    }
  };

  const showNotification = (message, type = 'error') => {
    setNotification({ show: true, message, type });
    setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);
  };

  const generatePDF = () => {
    try {
      const doc = new jsPDF();
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);

      doc.setFontSize(20);
      doc.setTextColor(99, 102, 241); // #6366f1
      doc.text('Payment Receipt', 20, 20);

      doc.setFontSize(12);
      doc.setTextColor(55, 65, 81); // #374151
      doc.text(`Date: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', dateStyle: 'medium', timeStyle: 'short' })}`, 20, 40);
      doc.text(`Transaction ID: ${transaction_id || 'N/A'}`, 20, 50);
      doc.text(`User: ${userName}`, 20, 60);
      doc.text(`Email: ${user_id || 'N/A'}`, 20, 70);
      doc.text(`Membership Type: ${membership_type || 'N/A'}`, 20, 80);
      doc.text(`Amount: â‚¹${amount ?? 'N/A'}`, 20, 90);
      doc.text(`Status: ${payment_status || 'N/A'}`, 20, 100);

      doc.setFontSize(10);
      doc.setTextColor(107, 114, 128); // #6b7280
      doc.text('Generated by Dashboard', 20, 280);

      doc.save(`receipt_${transaction_id || 'payment'}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      showNotification('Failed to generate PDF', 'error');
    }
  };

  return (
    <Box sx={{ position: 'relative', display: 'inline-block' }}>
      {notification.show && (
        <Alert
          severity={notification.type}
          action={
            <IconButton
              size="small"
              onClick={() => setNotification({ ...notification, show: false })}
              sx={{ color: '#6b7280' }}
            >
              <Cancel />
            </IconButton>
          }
          sx={{
            position: 'absolute',
            top: -60,
            right: 0,
            zIndex: 1400,
            maxWidth: 320,
            borderLeft: `4px solid`,
            borderColor: notification.type === 'error' ? '#ef4444' : '#22c55e',
            bgcolor: '#ffffff',
            color: '#374151',
            p: 1,
            fontSize: '0.875rem',
          }}
        >
          {notification.message}
        </Alert>
      )}
      <Button
        variant="contained"
        startIcon={loading ? <CircularProgress size={16} sx={{ color: '#ffffff' }} /> : <PictureAsPdf />}
        onClick={() => {
          if (userName === 'N/A' && user_id) fetchUserName();
          generatePDF();
        }}
        disabled={loading}
        sx={{
          bgcolor: '#6366f1',
          '&:hover': { bgcolor: '#4338ca' },
          color: '#ffffff',
          fontSize: '0.875rem',
          px: 2,
          py: 1,
          borderRadius: 1,
        }}
      >
        {loading ? 'Fetching User...' : 'Generate PDF'}
      </Button>
    </Box>
  );
};

PaymentReceiptPDF.propTypes = {
  amount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  membership_type: PropTypes.string,
  payment_status: PropTypes.string,
  transaction_id: PropTypes.string,
  user_id: PropTypes.string,
};

// EMIPayments Component
const EMIPayments = () => {
  const [notification, setNotification] = useState({ show: false, message: '', type: 'error' });
  const [selectedImage, setSelectedImage] = useState(null);
  const [searchFilters, setSearchFilters] = useState({
    user_id: '',
    transaction_id: '',
    membership_type: '',
    status: '',
    date: '',
    payment_type: '',
  });
  const [sortField, setSortField] = useState('date_of_payment');
  const [sortDirection, setSortDirection] = useState('desc');
  const [editingPaymentId, setEditingPaymentId] = useState(null);
  const [editValues, setEditValues] = useState({});
  const [expandedPaymentId, setExpandedPaymentId] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [emiPayments, setEMIPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const itemsPerPage = 10;

  const isValidImageUrl = (str) => {
    if (!str || typeof str !== 'string') {
      console.log('Invalid image source: null or not a string', str);
      return false;
    }
    const isValid = str.startsWith('http://') || str.startsWith('https://') || str.startsWith('data:image/');
    if (!isValid) {
      console.log('Image source does not match valid patterns (http, https, or data:image):', str);
    }
    return isValid;
  };

  const showNotification = (message, type = 'error') => {
    setNotification({ show: true, message, type });
    setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);
  };

  // Fetch EMI and one-time payments
  const fetchEMIPayments = async () => {
    setLoading(true);
    try {
      const db = getFirestore();
      const emiPaymentsCollection = collection(db, 'emi_payments');
      const paymentsCollection = collection(db, 'payments');

      // Fetch all EMI payments
      const emiPaymentsSnapshot = await getDocs(emiPaymentsCollection);
      const paymentIdsFromEMI = [
        ...new Set(emiPaymentsSnapshot.docs.map((doc) => doc.data().payment_id)),
      ];

      // Fetch all payments
      const paymentsSnapshot = await getDocs(paymentsCollection);
      const paymentsMap = paymentsSnapshot.docs.reduce((acc, paymentDoc) => {
        acc[paymentDoc.id] = { id: paymentDoc.id, ...paymentDoc.data() };
        return acc;
      }, {});

      // Process EMI payments
      const emiPaymentsData = emiPaymentsSnapshot.docs
        .map((doc) => {
          const emiData = doc.data();
          const parentPayment = paymentsMap[emiData.payment_id];
          if (!parentPayment) {
            console.warn(`Parent payment not found for EMI ID: ${doc.id}`);
            return null;
          }
          return {
            emi_id: doc.id,
            payment_id: emiData.payment_id,
            user_id: emiData.user_id || 'N/A',
            amount: emiData.amount || 0,
            membership_type: parentPayment.membership_type || 'N/A',
            payment_status: emiData.payment_status || 'pending',
            transaction_id: emiData.transaction_id || 'N/A',
            date_of_payment: emiData.date_of_payment || new Date().toISOString().split('T')[0],
            payment_screenshot: emiData.payment_screenshot || '',
            remaining_months_to_pay: parentPayment.remaining_months_to_pay || 0,
            created_at: parentPayment.created_at?.toDate()?.toISOString() || new Date().toISOString(),
            payment_type: 'emi',
          };
        })
        .filter((payment) => payment !== null);

      // Process one-time payments
      const oneTimePaymentsData = paymentsSnapshot.docs
        .filter((doc) => {
          const payment = doc.data();
          return !paymentIdsFromEMI.includes(doc.id) || !['12 months', '24 months'].includes(payment.membership_type);
        })
        .map((doc) => {
          const payment = doc.data();
          return {
            emi_id: null,
            payment_id: doc.id,
            user_id: payment.user_id || 'N/A',
            amount: payment.amount || 0,
            membership_type: payment.membership_type || 'One-Time',
            payment_status: payment.payment_status || 'pending',
            transaction_id: payment.transaction_id || 'N/A',
            date_of_payment: payment.created_at?.toDate()?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0],
            payment_screenshot: payment.payment_screenshot || '',
            remaining_months_to_pay: 0,
            created_at: payment.created_at?.toDate()?.toISOString() || new Date().toISOString(),
            payment_type: 'one-time',
          };
        });

      // Combine and log payments for debugging
      const combinedPayments = [...emiPaymentsData, ...oneTimePaymentsData];
      console.log('Fetched payments:', combinedPayments.map(p => ({
        id: p.emi_id || p.payment_id,
        payment_screenshot: p.payment_screenshot ? `${p.payment_screenshot.substring(0, 30)}...` : 'N/A',
      })));
      setEMIPayments(combinedPayments);

      // Update remaining_months_to_pay
      for (const paymentId of paymentIdsFromEMI) {
        const emiPaymentsForPlan = emiPaymentsData.filter(
          (p) => p.payment_id === paymentId && p.payment_status === 'approved'
        );
        const approvedCount = emiPaymentsForPlan.length;
        const parentPayment = paymentsMap[paymentId];
        if (parentPayment && ['12 months', '24 months'].includes(parentPayment.membership_type)) {
          const initialRemainingMonths = parentPayment.membership_type === '12 months' ? 12 : 24;
          const updatedRemainingMonths = Math.max(initialRemainingMonths - approvedCount, 0);
          if (updatedRemainingMonths !== parentPayment.remaining_months_to_pay) {
            await updateDoc(doc(db, 'payments', paymentId), {
              remaining_months_to_pay: updatedRemainingMonths,
            });
            setEMIPayments((prev) =>
              prev.map((p) =>
                p.payment_id === paymentId ? { ...p, remaining_months_to_pay: updatedRemainingMonths } : p
              )
            );
          }
        }
      }
    } catch (error) {
      console.error('Error fetching payments:', error);
      showNotification('Failed to load payments', 'error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEMIPayments();
  }, []);

  // const handleUpdatePayment = async (emiId, updatedValues) => {
  //   try {
  //     const db = getFirestore();
  //     if (updatedValues.payment_type === 'emi') {
  //       await updateDoc(doc(db, 'emi_payments', emiId), {
  //         user_id: updatedValues.user_id,
  //         amount: parseFloat(updatedValues.amount) || 0,
  //         transaction_id: updatedValues.transaction_id,
  //         payment_status: updatedValues.payment_status,
  //         payment_screenshot: updatedValues.payment_screenshot,
  //       });

  //       if (updatedValues.payment_status === 'approved') {
  //         const paymentId = updatedValues.payment_id;
  //         const emiPaymentsQuery = await getDocs(
  //           query(collection(db, 'emi_payments'), where('payment_id', '==', paymentId), where('payment_status', '==', 'approved'))
  //         );
  //         const approvedCount = emiPaymentsQuery.size;
  //         const parentPaymentQuery = await getDocs(query(collection(db, 'payments'), where('__name__', '==', paymentId)));
  //         if (!parentPaymentQuery.empty) {
  //           const parentPayment = parentPaymentQuery.docs[0].data();
  //           const initialRemainingMonths = parentPayment.membership_type === '12 months' ? 12 : 24;
  //           const updatedRemainingMonths = Math.max(initialRemainingMonths - approvedCount, 0);
  //           await updateDoc(doc(db, 'payments', paymentId), {
  //             remaining_months_to_pay: updatedRemainingMonths,
  //           });
  //           setEMIPayments((prev) =>
  //             prev.map((p) =>
  //               p.payment_id === paymentId ? { ...p, remaining_months_to_pay: updatedRemainingMonths } : p
  //             )
  //           );
  //         }
  //       }
  //     } else {
  //       await updateDoc(doc(db, 'payments', updatedValues.payment_id), {
  //         user_id: updatedValues.user_id,
  //         amount: parseFloat(updatedValues.amount) || 0,
  //         transaction_id: updatedValues.transaction_id,
  //         payment_status: updatedValues.payment_status,
  //         payment_screenshot: updatedValues.payment_screenshot,
  //       });
  //     }
  //     showNotification('Payment updated successfully', 'success');
  //     fetchEMIPayments();
  //   } catch (error) {
  //     console.error('Error updating payment:', error);
  //     showNotification('Failed to update payment', 'error');
  //   }
  // };
  const handleUpdatePayment = async (emiId, updatedValues) => {
    try {
      const db = getFirestore();
      if (updatedValues.payment_type === 'emi') {
        // Update emi_payments collection
        await updateDoc(doc(db, 'emi_payments', emiId), {
          user_id: updatedValues.user_id,
          amount: parseFloat(updatedValues.amount) || 0,
          transaction_id: updatedValues.transaction_id,
          payment_status: updatedValues.payment_status,
          payment_screenshot: updatedValues.payment_screenshot,
        });
  
        // Update remaining_months_to_pay for EMI payments
        if (updatedValues.payment_status === 'approved') {
          const paymentId = updatedValues.payment_id;
          const emiPaymentsQuery = await getDocs(
            query(collection(db, 'emi_payments'), where('payment_id', '==', paymentId), where('payment_status', '==', 'approved'))
          );
          const approvedCount = emiPaymentsQuery.size;
          const parentPaymentQuery = await getDocs(query(collection(db, 'payments'), where('__name__', '==', paymentId)));
          if (!parentPaymentQuery.empty) {
            const parentPayment = parentPaymentQuery.docs[0].data();
            // Only update for EMI membership types
            if (['12 months', '24 months'].includes(parentPayment.membership_type)) {
              const initialRemainingMonths = parentPayment.membership_type === '12 months' ? 12 : 24;
              const updatedRemainingMonths = Math.max(initialRemainingMonths - approvedCount, 0);
              await updateDoc(doc(db, 'payments', paymentId), {
                remaining_months_to_pay: updatedRemainingMonths,
              });
              setEMIPayments((prev) =>
                prev.map((p) =>
                  p.payment_id === paymentId ? { ...p, remaining_months_to_pay: updatedRemainingMonths } : p
                )
              );
            }
          }
        }
      } else {
        await updateDoc(doc(db, 'payments', updatedValues.payment_id), {
          user_id: updatedValues.user_id,
          amount: parseFloat(updatedValues.amount) || 0,
          transaction_id: updatedValues.transaction_id,
          payment_status: updatedValues.payment_status,
          payment_screenshot: updatedValues.payment_screenshot,
          remaining_months_to_pay: 0, 
        });
      }
      showNotification('Payment updated successfully', 'success');
      fetchEMIPayments();
    } catch (error) {
      console.error('Error updating payment:', error);
      showNotification('Failed to update payment', 'error');
    }
  };
  const handleViewImage = (payment) => {
    const imageData = payment.payment_screenshot;
    console.log('Attempting to view image:', imageData ? `${imageData.substring(0, 30)}...` : 'N/A');
    if (!imageData) {
      showNotification('No image data available for this payment', 'error');
      return;
    }
    if (!isValidImageUrl(imageData)) {
      showNotification(`Invalid image source: ${imageData.substring(0, 30)}...`, 'error');
      return;
    }
    setSelectedImage({
      src: imageData,
      paymentId: payment.emi_id || payment.payment_id,
      userId: typeof payment.user_id === 'string' ? payment.user_id : 'N/A',
      amount: payment.amount ?? 'N/A',
    });
  };

  const handleEditClick = (payment) => {
    setEditingPaymentId(payment.emi_id || payment.payment_id);
    setEditValues({
      user_id: typeof payment.user_id === 'string' ? payment.user_id : '',
      amount: payment.amount ?? '',
      membership_type: payment.membership_type || '',
      payment_status: payment.payment_status || 'pending',
      transaction_id: payment.transaction_id || '',
      payment_screenshot: payment.payment_screenshot || '',
      payment_id: payment.payment_id,
      payment_type: payment.payment_type || 'one-time',
    });
    setExpandedPaymentId(payment.emi_id || payment.payment_id);
  };

  const handleEditChange = (field) => (event) => {
    setEditValues({ ...editValues, [field]: event.target.value });
  };

  const handleSave = (paymentId) => {
    if (!editValues.user_id.trim() || !editValues.amount) {
      showNotification('Please provide user ID and amount.', 'error');
      return;
    }
    handleUpdatePayment(paymentId, editValues);
    setEditingPaymentId(null);
    setEditValues({});
  };

  const handleCancel = () => {
    setEditingPaymentId(null);
    setEditValues({});
  };

  const handleSearchChange = (field) => (event) => {
    setSearchFilters((prev) => ({ ...prev, [field]: event.target.value }));
    setCurrentPage(1);
  };

  const handleToggleExpand = (paymentId) => {
    setExpandedPaymentId(expandedPaymentId === paymentId ? null : paymentId);
  };

  const filteredPayments = emiPayments
    .filter((payment) => {
      if (!payment || typeof payment !== 'object' || (!payment.emi_id && !payment.payment_id)) {
        console.warn('Invalid payment object filtered out:', payment);
        return false;
      }

      const userId = typeof payment.user_id === 'string' ? payment.user_id : '';
      const userMatch =
        !searchFilters.user_id ||
        userId.toLowerCase().includes(searchFilters.user_id.toLowerCase());
      const transactionMatch =
        !searchFilters.transaction_id ||
        (payment.transaction_id?.toLowerCase() || '').includes(searchFilters.transaction_id.toLowerCase());
      const membershipMatch =
        !searchFilters.membership_type ||
        (payment.membership_type?.toLowerCase() || '').includes(searchFilters.membership_type.toLowerCase());
      const statusMatch =
        !searchFilters.status ||
        (payment.payment_status?.toLowerCase() || '').includes(searchFilters.status.toLowerCase());
      const dateMatch =
        !searchFilters.date ||
        (payment.date_of_payment
          ? payment.date_of_payment.toLowerCase().includes(searchFilters.date.toLowerCase())
          : false);
      const typeMatch =
        !searchFilters.payment_type ||
        payment.payment_type.toLowerCase().includes(searchFilters.payment_type.toLowerCase());

      return userMatch && transactionMatch && membershipMatch && statusMatch && dateMatch && typeMatch;
    })
    .sort((a, b) => {
      const aValue = a[sortField] ?? '';
      const bValue = b[sortField] ?? '';

      if (sortField === 'amount') {
        const aNum = parseFloat(aValue) || 0;
        const bNum = parseFloat(bValue) || 0;
        return sortDirection === 'asc' ? aNum - bNum : bNum - aNum;
      }

      if (sortField === 'date_of_payment') {
        const aDate = aValue ? new Date(aValue) : new Date(0);
        const bDate = bValue ? new Date(bValue) : new Date(0);
        return sortDirection === 'asc' ? aDate - bDate : bDate - aDate;
      }

      return sortDirection === 'asc'
        ? String(aValue).localeCompare(String(bValue))
        : String(bValue).localeCompare(String(aValue));
    });

  const totalPages = Math.ceil(filteredPayments.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedPayments = filteredPayments.slice(startIndex, endIndex);

  const handlePageChange = (event, value) => {
    setCurrentPage(value);
  };

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
    setCurrentPage(1);
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      approved: { color: '#22c55e', label: 'Approved' },
      pending: { color: '#f59e0b', label: 'Pending' },
      failed: { color: '#ef4444', label: 'Failed' },
    };

    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;

    return (
      <Chip
        label={config.label}
        sx={{
          bgcolor: `${config.color}22`,
          color: config.color,
          border: `1px solid ${config.color}44`,
          fontWeight: 500,
          fontSize: { xs: '0.75rem', sm: '0.875rem' },
          padding: { xs: '2px 4px', sm: '4px 8px' },
        }}
        size="small"
      />
    );
  };



  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <Box textAlign="center">
          <CircularProgress sx={{ color: '#6366f1' }} />
          <Typography variant="body1" sx={{ color: '#6b7280', mt: 2 }}>
            Loading payments...
          </Typography>
        </Box>
      </Box>
    );
  }

  return (
    <ErrorBoundary>
      <Box sx={{ minHeight: '100vh', p: { xs: 2, sm: 3 } }}>
        {notification.show && (
          <Alert
            severity={notification.type}
            action={
              <IconButton
                size="small"
                onClick={() => setNotification({ ...notification, show: false })}
                sx={{ color: '#6b7280' }}
              >
                <Cancel />
              </IconButton>
            }
            sx={{
              position: 'fixed',
              top: 16,
              right: 16,
              zIndex: 1400,
              maxWidth: 320,
              borderLeft: `4px solid`,
              borderColor: notification.type === 'error' ? '#ef4444' : '#22c55e',
              bgcolor: '#ffffff',
              color: '#374151',
            }}
          >
            {notification.message}
          </Alert>
        )}
        <Dialog
          open={!!selectedImage}
          onClose={() => setSelectedImage(null)}
          maxWidth="md"
          fullWidth
        >
          <DialogTitle sx={{ bgcolor: '#f8fafc', borderBottom: '1px solid #e5e7eb' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center">
              <Box>
                <Typography variant="h6" sx={{ color: '#1f2937', fontWeight: 600 }}>
                  Payment Receipt
                </Typography>
                <Typography variant="body2" sx={{ color: '#6b7280' }}>
                  Payment ID: {selectedImage?.paymentId} | User: {selectedImage?.userId} | Amount: â‚¹{selectedImage?.amount}
                </Typography>
              </Box>
              <IconButton onClick={() => setSelectedImage(null)} sx={{ color: '#6b7280' }}>
                <Cancel />
              </IconButton>
            </Box>
          </DialogTitle>
          <DialogContent sx={{ bgcolor: '#ffffff' }}>
            <Box
              component="img"
              src={selectedImage?.src}
              alt="Payment Receipt"
              sx={{ maxWidth: '100%', maxHeight: '50vh', mx: 'auto', display: 'block' }}
              onError={(e) => {
                console.error('Image failed to load:', selectedImage?.src, e);
                showNotification(`Failed to load receipt image: ${selectedImage?.src.substring(0, 30)}...`, 'error');
                // Keep dialog open for debugging
                // setSelectedImage(null);
              }}
            />
          </DialogContent>
        </Dialog>
        <Box sx={{ maxWidth: 1280, mx: 'auto', px: 3, py: 2 }}>         
          <Box sx={{ bgcolor: '#ffffff', borderRadius: 2, boxShadow: 1, mb: 3, border: '1px solid #e5e7eb' }}>
            <Box sx={{ maxWidth: 1280, mx: 'auto', px: 3, py: 2 }}>
              <Box display="flex" flexDirection={{ xs: 'column', sm: 'row' }} justifyContent="space-between" alignItems={{ xs: 'flex-start', sm: 'center' }} gap={2}>
                <Box display="flex" alignItems="center" gap={2}>
                  <Box sx={{ p: 1.5, bgcolor: '#f3f4f6', borderRadius: 2 }}>
                    <CreditCard sx={{ color: '#6366f1', fontSize: 24 }} />
                  </Box>
                  <Box>
                    <Typography variant="h5" sx={{ color: '#1f2937', fontWeight: 600 }}>
                      Payment Management
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#6b7280' }}>
                      Manage and track all EMI and one-time payment transactions
                    </Typography>
                  </Box>
                </Box>
                <Box textAlign={{ xs: 'left', sm: 'right' }}>
                  <Typography variant="h4" sx={{ color: '#6366f1', fontWeight: 600 }}>
                    {filteredPayments.length}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#6b7280' }}>
                    Total Payments
                  </Typography>
                </Box>
              </Box>
            </Box>
          </Box>

          <Box sx={{ maxWidth: 1280, mx: 'auto', px: 3, py: 2 }}>
            <Paper sx={{ p: 2, mb: 3, border: '1px solid #e5e7eb', borderRadius: 2 }}>
              <Box display="flex" flexDirection={{ xs: 'column', sm: 'row' }} gap={2}>
                <TextField
                  label="Search User ID"
                  value={searchFilters.user_id}
                  onChange={handleSearchChange('user_id')}
                  InputProps={{ startAdornment: <SearchIcon sx={{ color: '#6366f1', mr: 1 }} /> }}
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                />
                <TextField
                  label="Search Transaction ID"
                  value={searchFilters.transaction_id}
                  onChange={handleSearchChange('transaction_id')}
                  InputProps={{ startAdornment: <SearchIcon sx={{ color: '#6366f1', mr: 1 }} /> }}
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                />
                <TextField
                  label="Search Membership Type"
                  value={searchFilters.membership_type}
                  onChange={handleSearchChange('membership_type')}
                  InputProps={{ startAdornment: <SearchIcon sx={{ color: '#6366f1', mr: 1 }} /> }}
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                />
                <Select
                  value={searchFilters.status}
                  onChange={handleSearchChange('status')}
                  displayEmpty
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                >
                  <MenuItem value="">All Statuses</MenuItem>
                  <MenuItem value="approved">Approved</MenuItem>
                  <MenuItem value="pending">Pending</MenuItem>
                  <MenuItem value="failed">Failed</MenuItem>
                </Select>
                <TextField
                  label="Search Date"
                  value={searchFilters.date}
                  onChange={handleSearchChange('date')}
                  InputProps={{ startAdornment: <SearchIcon sx={{ color: '#6366f1', mr: 1 }} /> }}
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                />
                <Select
                  value={searchFilters.payment_type}
                  onChange={handleSearchChange('payment_type')}
                  displayEmpty
                  sx={{ flex: 1, bgcolor: '#f8fafc' }}
                  size="small"
                >
                  <MenuItem value="">All Payment Types</MenuItem>
                  <MenuItem value="emi">EMI</MenuItem>
                  <MenuItem value="one-time">One-Time</MenuItem>
                </Select>
              </Box>
            </Paper>

            {filteredPayments.length === 0 ? (
              <Paper sx={{ p: 4, textAlign: 'center', border: '1px solid #e5e7eb', borderRadius: 2 }}>
                <Box sx={{ bgcolor: '#f8fafc', borderRadius: 2, p: 2, mx: 'auto', width: 96, height: 96, display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 2 }}>
                  <CreditCard sx={{ fontSize: 48, color: '#6b7280' }} />
                </Box>
                <Typography variant="h6" sx={{ color: '#1f2937', fontWeight: 600 }} gutterBottom>
                  No Payments Found
                </Typography>
                <Typography variant="body2" sx={{ color: '#6b7280' }}>
                  {Object.values(searchFilters).some((value) => value)
                    ? 'Try adjusting your search criteria'
                    : 'Payment records will appear here once available'}
                </Typography>
              </Paper>
            ) : (
              <>
                <TableContainer component={Paper} sx={{ display: { xs: 'none', sm: 'block' }, border: '1px solid #e5e7eb', borderRadius: 2 }}>
                  <Table>
                    <TableHead>
                      <TableRow sx={{ bgcolor: '#f8fafc' }}>
                        <TableCell onClick={() => handleSort('user_id')} sx={{ cursor: 'pointer', '&:hover': { bgcolor: '#f3f4f6' } }}>
                          <Box display="flex" alignItems="center" gap={1}>
                            <Person fontSize="small" sx={{ color: '#6366f1' }} />
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              User {sortField === 'user_id' && (sortDirection === 'asc' ? ' â†‘' : ' â†“')}
                            </Typography>
                          </Box>
                        </TableCell>
                        <TableCell onClick={() => handleSort('amount')} sx={{ cursor: 'pointer', '&:hover': { bgcolor: '#f3f4f6' } }}>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Amount {sortField === 'amount' && (sortDirection === 'asc' ? ' â†‘' : ' â†“')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Membership
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Status
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Transaction ID
                          </Typography>
                        </TableCell>
                        <TableCell onClick={() => handleSort('date_of_payment')} sx={{ cursor: 'pointer', '&:hover': { bgcolor: '#f3f4f6' } }}>
                          <Box display="flex" alignItems="center" gap={1}>
                            <CalendarToday fontSize="small" sx={{ color: '#6366f1' }} />
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Date {sortField === 'date_of_payment' && (sortDirection === 'asc' ? ' â†‘' : ' â†“')}
                            </Typography>
                          </Box>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Remaining Months
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Receipt
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            Actions
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                            PDF
                          </Typography>
                        </TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {paginatedPayments.map((payment, index) => (
                        <TableRow
                          key={payment.emi_id || payment.payment_id}
                          sx={{
                            bgcolor: index % 2 === 0 ? '#ffffff' : '#f9fafb',
                            '&:hover': { bgcolor: '#f3f4f6' },
                          }}
                        >
                          <TableCell>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <TextField
                                size="small"
                                label="User ID"
                                value={editValues.user_id}
                                onChange={handleEditChange('user_id')}
                                sx={{ bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              />
                            ) : (
                              <Box display="flex" alignItems="center" gap={1}>
                                <Box sx={{ width: 32, height: 32, bgcolor: '#f3f4f6', borderRadius: '50%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                                  <Person sx={{ color: '#6366f1', fontSize: 18 }} />
                                </Box>
                                <Typography variant="body2" sx={{ color: '#374151' }}>
                                  {typeof payment.user_id === 'string' ? payment.user_id : 'N/A'}
                                </Typography>
                              </Box>
                            )}
                          </TableCell>
                          <TableCell>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <TextField
                                size="small"
                                type="number"
                                label="Amount"
                                value={editValues.amount}
                                onChange={handleEditChange('amount')}
                                sx={{ bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              />
                            ) : (
                              <Typography variant="body1" sx={{ color: '#374151', fontWeight: 500 }}>
                                â‚¹{payment.amount ?? 'N/A'}
                              </Typography>
                            )}
                          </TableCell>
                          <TableCell>
                            <Typography variant="body1" sx={{ color: '#374151' }}>
                              {payment.membership_type || 'N/A'}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <Select
                                size="small"
                                value={editValues.payment_status || 'pending'}
                                onChange={handleEditChange('payment_status')}
                                sx={{ bgcolor: 'rgba(255, 255, 255, 0.9)', minWidth: '100%' }}
                              >
                                <MenuItem value="approved">Approved</MenuItem>
                                <MenuItem value="pending">Pending</MenuItem>
                                <MenuItem value="failed">Failed</MenuItem>
                              </Select>
                            ) : (
                              getStatusBadge(payment.payment_status)
                            )}
                          </TableCell>
                          <TableCell>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <TextField
                                size="small"
                                label="Transaction ID"
                                value={editValues.transaction_id}
                                onChange={handleEditChange('transaction_id')}
                                sx={{ bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              />
                            ) : (
                              <Typography variant="body2" fontFamily="monospace" sx={{ color: '#374151' }}>
                                {payment.transaction_id || 'N/A'}
                              </Typography>
                            )}
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" sx={{ color: '#6b7280' }}>
                              {payment.date_of_payment || 'N/A'}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" sx={{ color: '#374151' }}>
                              {payment.payment_type === 'emi' ? payment.remaining_months_to_pay ?? 'N/A' : 'N/A'}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            {payment.payment_screenshot ? (
                              <Button
                                variant="outlined"
                                startIcon={<Visibility />}
                                onClick={() => handleViewImage(payment)}
                                size="small"
                                sx={{ bgcolor: '#f8fafc', color: '#6366f1', borderColor: '#d1d5db' }}
                              >
                                View
                              </Button>
                            ) : (
                              <Typography variant="caption" sx={{ color: '#6b7280', fontStyle: 'italic' }}>
                                No image
                              </Typography>
                            )}
                          </TableCell>
                          <TableCell>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <Box display="flex" gap={1}>
                                <Button
                                  variant="contained"
                                  size="small"
                                  onClick={() => handleSave(payment.emi_id || payment.payment_id)}
                                  sx={{ bgcolor: '#6366f1', '&:hover': { bgcolor: '#4338ca' } }}
                                >
                                  Save
                                </Button>
                                <Button
                                  variant="outlined"
                                  size="small"
                                  onClick={handleCancel}
                                  sx={{ borderColor: '#d1d5db', color: '#374151' }}
                                >
                                  Cancel
                                </Button>
                              </Box>
                            ) : (
                              <IconButton onClick={() => handleEditClick(payment)} sx={{ color: '#6b7280' }}>
                                <Edit />
                              </IconButton>
                            )}
                          </TableCell>
                          <TableCell>
                            <PaymentReceiptPDF
                              amount={payment.amount}
                              membership_type={payment.membership_type}
                              payment_status={payment.payment_status}
                              transaction_id={payment.transaction_id}
                              user_id={typeof payment.user_id === 'string' ? payment.user_id : ''}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  <Box sx={{ bgcolor: '#f8fafc', p: 2, borderTop: '1px solid #e5e7eb' }}>
                    <Box display="flex" flexDirection={{ xs: 'column', sm: 'row' }} justifyContent="space-between" alignItems={{ xs: 'flex-start', sm: 'center' }} gap={1}>
                      <Typography variant="body2" sx={{ color: '#6b7280' }}>
                        Showing <strong>{paginatedPayments.length}</strong> of <strong>{filteredPayments.length}</strong> payments
                      </Typography>
                      <Pagination
                        count={totalPages}
                        page={currentPage}
                        onChange={handlePageChange}
                        sx={{
                          '& .MuiPaginationItem-root': {
                            color: '#374151',
                            '&.Mui-selected': { bgcolor: '#6366f1', color: '#ffffff' },
                          },
                        }}
                      />
                      <Typography variant="body2" sx={{ color: '#6b7280' }}>
                        Last updated: {new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
                      </Typography>
                    </Box>
                  </Box>
                </TableContainer>

                <List sx={{ display: { xs: 'block', sm: 'none' }, mt: 3 }}>
                  {paginatedPayments.map((payment, index) => (
                    <ListItem
                      key={payment.emi_id || payment.payment_id}
                      sx={{
                        p: 2,
                        mb: 2,
                        border: '1px solid #e5e7eb',
                        borderRadius: 2,
                        bgcolor: index % 2 === 0 ? '#ffffff' : '#f9fafb',
                        flexDirection: 'column',
                        alignItems: 'flex-start',
                      }}
                    >
                      <ListItemButton onClick={() => handleToggleExpand(payment.emi_id || payment.payment_id)} sx={{ width: '100%', p: 0, mb: 1 }}>
                        <ListItemText
                          primary={
                            <Box display="flex" alignItems="center" gap={1}>
                              <Person fontSize="small" sx={{ color: '#6366f1' }} />
                              <Typography variant="body1" sx={{ color: '#333', fontWeight: 'bold' }}>
                                {typeof payment.user_id === 'string' ? payment.user_id : 'N/A'}
                              </Typography>
                            </Box>
                          }
                        />
                        {expandedPaymentId === (payment.emi_id || payment.payment_id) ? <ExpandLess sx={{ color: '#6366f1' }} /> : <ExpandMore />}
                      </ListItemButton>
                      <Collapse in={expandedPaymentId === (payment.emi_id || payment.payment_id)} timeout="auto" unmountOnExit>
                        <Box display="flex" flexDirection="column" gap={2} width="100%">
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Amount
                            </Typography>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <TextField
                                size="small"
                                type="number"
                                label="Amount"
                                value={editValues.amount}
                                onChange={handleEditChange('amount')}
                                fullWidth
                                sx={{ mt: 1, bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              />
                            ) : (
                              <Typography variant="body2" sx={{ color: '#374151', fontWeight: 500, mt: 0.5 }}>
                                â‚¹{payment.amount ?? 'N/A'}
                              </Typography>
                            )}
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Membership
                            </Typography>
                            <Typography variant="body2" sx={{ color: '#374151', mt: 0.5 }}>
                              {payment.membership_type || 'N/A'}
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Status
                            </Typography>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <Select
                                size="small"
                                value={editValues.payment_status || 'pending'}
                                onChange={handleEditChange('payment_status')}
                                fullWidth
                                sx={{ mt: 1, bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              >
                                <MenuItem value="approved">Approved</MenuItem>
                                <MenuItem value="pending">Pending</MenuItem>
                                <MenuItem value="failed">Failed</MenuItem>
                              </Select>
                            ) : (
                              <Box mt={0.5}>{getStatusBadge(payment.payment_status)}</Box>
                            )}
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Transaction ID
                            </Typography>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <TextField
                                size="small"
                                label="Transaction ID"
                                value={editValues.transaction_id}
                                onChange={handleEditChange('transaction_id')}
                                fullWidth
                                sx={{ mt: 1, bgcolor: 'rgba(255, 255, 255, 0.9)' }}
                              />
                            ) : (
                              <Typography variant="body2" fontFamily="monospace" sx={{ color: '#374151', mt: 0.5 }}>
                                {payment.transaction_id || 'N/A'}
                              </Typography>
                            )}
                          </Box>
                          <Box>
                            <Box display="flex" alignItems="center" gap={1}>
                              <CalendarToday fontSize="small" sx={{ color: '#6366f1' }} />
                              <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                                Date
                              </Typography>
                            </Box>
                            <Typography variant="body2" sx={{ color: '#6b7280', mt: 0.5 }}>
                              {payment.date_of_payment || 'N/A'}
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Remaining Months
                            </Typography>
                            <Typography variant="body2" sx={{ color: '#374151', mt: 0.5 }}>
                              {payment.payment_type === 'emi' ? payment.remaining_months_to_pay ?? 'N/A' : 'N/A'}
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              Receipt
                            </Typography>
                            {payment.payment_screenshot ? (
                              <Button
                                variant="outlined"
                                startIcon={<Visibility />}
                                onClick={() => handleViewImage(payment)}
                                size="small"
                                sx={{ mt: 1, bgcolor: '#f8fafc', color: '#6366f1', borderColor: '#d1d5db' }}
                              >
                                View
                              </Button>
                            ) : (
                              <Typography variant="caption" sx={{ color: '#6b7280', fontStyle: 'italic', mt: 0.5 }}>
                                No image
                              </Typography>
                            )}
                          </Box>
                          <Box>
                            <Typography variant="subtitle2" sx={{ color: '#374151', fontWeight: 600 }}>
                              PDF Receipt
                            </Typography>
                            <Box mt={0.5}>
                              <PaymentReceiptPDF
                                amount={payment.amount}
                                membership_type={payment.membership_type}
                                payment_status={payment.payment_status}
                                transaction_id={payment.transaction_id}
                                user_id={typeof payment.user_id === 'string' ? payment.user_id : ''}
                              />
                            </Box>
                          </Box>
                          <Box display="flex" justifyContent="flex-end" gap={1}>
                            {editingPaymentId === (payment.emi_id || payment.payment_id) ? (
                              <>
                                <Button
                                  variant="contained"
                                  size="small"
                                  onClick={() => handleSave(payment.emi_id || payment.payment_id)}
                                  sx={{ bgcolor: '#6366f1', '&:hover': { bgcolor: '#4338ca' } }}
                                >
                                  Save
                                </Button>
                                <Button
                                  variant="outlined"
                                  size="small"
                                  onClick={handleCancel}
                                  sx={{ borderColor: '#d1d5db', color: '#374151' }}
                                >
                                  Cancel
                                </Button>
                              </>
                            ) : (
                              <IconButton onClick={() => handleEditClick(payment)} sx={{ color: '#6b7280' }}>
                                <Edit />
                              </IconButton>
                            )}
                          </Box>
                        </Box>
                      </Collapse>
                    </ListItem>
                  ))}
                  <Box sx={{ bgcolor: '#f8fafc', p: 1.5, border: '1px solid #e5e7eb' }}>
                    <Box display="flex" flexDirection="column" gap={1}>
                      <Typography variant="body2" sx={{ color: '#6b7280' }}>
                        Showing <strong>{paginatedPayments.length}</strong> of <strong>{filteredPayments.length}</strong> payments
                      </Typography>
                      <Pagination
                        count={totalPages}
                        page={currentPage}
                        onChange={handlePageChange}
                        sx={{
                          display: 'flex',
                          justifyContent: 'center',
                          '& .MuiPaginationItem-root': {
                            color: '#374151',
                            '&.Mui-selected': { bgcolor: '#6366f1', color: '#ffffff' },
                          },
                        }}
                      />
                      <Typography variant="body2" sx={{ color: '#6b7280' }}>
                        Last updated: {new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
                      </Typography>
                    </Box>
                  </Box>
                </List>
              </>
            )}
          </Box>
        </Box>
      </Box>
    </ErrorBoundary>
  );
};

EMIPayments.propTypes = {
  emiPayments: PropTypes.arrayOf(
    PropTypes.shape({
      emi_id: PropTypes.string,
      payment_id: PropTypes.string.isRequired,
      user_id: PropTypes.string,
      amount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      membership_type: PropTypes.string,
      payment_status: PropTypes.oneOf(['approved', 'pending', 'failed']),
      transaction_id: PropTypes.string,
      date_of_payment: PropTypes.string,
      payment_screenshot: PropTypes.string,
      remaining_months_to_pay: PropTypes.number,
      created_at: PropTypes.string,
      payment_type: PropTypes.oneOf(['emi', 'one-time']),
    })
  ),
};

EMIPayments.defaultProps = {
  emiPayments: [],
};

export default EMIPayments;