import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { jsPDF } from 'jspdf';
import { Box, Button, CircularProgress, Typography, Alert, IconButton } from '@mui/material';
import { Cancel, PictureAsPdf } from '@mui/icons-material';
import axios from 'axios';

const PaymentReceiptPDF = ({
  amount,
  membership_type,
  payment_status,
  transaction_id,
  user_id,
}) => {
  const [userName, setUserName] = useState('N/A');
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState({ show: false, message: '', type: '' });

  // Fetch user name from Firebase users collection
  useEffect(() => {
    const fetchUserName = async () => {
      setLoading(true);
      try {
        const response = await axios.get(
          'https://react-native-e20b7-default-rtdb.firebaseio.com/users.json'
        );
        const data = response.data || {};
        const user = Object.values(data).find((u) => u.email === user_id);
        setUserName(user?.name || 'Unknown User');
      } catch (error) {
        console.error('Error fetching user name:', error);
        setUserName('Unknown User');
        showNotification('Failed to fetch user name', 'error');
      }
      setLoading(false);
    };

    if (user_id) {
      fetchUserName();
    }
  }, [user_id]);

  const showNotification = (message, type = 'error') => {
    setNotification({ show: true, message, type });
    setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);
  };

  const generatePDF = () => {
    try {
      const doc = new jsPDF();

      // Set font styles
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);

      // Add header
      doc.setFontSize(20);
      doc.setTextColor(99, 102, 241); // #6366f1
      doc.text('Payment Receipt', 20, 20);

      // Add receipt details
      doc.setFontSize(12);
      doc.setTextColor(55, 65, 81); // #374151
      doc.text(`Date: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', dateStyle: 'medium', timeStyle: 'short' })}`, 20, 40);
      doc.text(`Transaction ID: ${transaction_id || 'N/A'}`, 20, 50);
      doc.text(`User: ${userName}`, 20, 60);
      doc.text(`Email: ${user_id || 'N/A'}`, 20, 70);
      doc.text(`Membership Type: ${membership_type || 'N/A'}`, 20, 80);
      doc.text(`Amount: â‚¹${amount || 'N/A'}`, 20, 90);
      doc.text(`Status: ${payment_status || 'N/A'}`, 20, 100);

      // Add footer
      doc.setFontSize(10);
      doc.setTextColor(107, 114, 128); // #6b7280
      doc.text('Generated by Dashboard', 20, 280);

      // Download the PDF
      doc.save(`receipt_${transaction_id || 'payment'}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      showNotification('Failed to generate PDF', 'error');
    }
  };

  return (
    <Box sx={{ position: 'relative', display: 'inline-block' }}>
      {/* Notification */}
      {notification.show && (
        <Alert
          severity={notification.type}
          action={
            <IconButton
              size="small"
              onClick={() => setNotification({ ...notification, show: false })}
              sx={{ color: '#6b7280' }}
            >
              <Cancel />
            </IconButton>
          }
          sx={{
            position: 'absolute',
            top: -60,
            right: 0,
            zIndex: 1400,
            maxWidth: 320,
            borderLeft: `4px solid`,
            borderColor: notification.type === 'error' ? '#ef4444' : '#22c55e',
            bgcolor: '#ffffff',
            color: '#374151',
            p: 1,
            fontSize: '0.875rem',
          }}
        >
          {notification.message}
        </Alert>
      )}

      {/* Generate PDF Button */}
      <Button
        variant="contained"
        startIcon={loading ? <CircularProgress size={16} sx={{ color: '#ffffff' }} /> : <PictureAsPdf />}
        onClick={generatePDF}
        disabled={loading}
        sx={{
          bgcolor: '#6366f1',
          '&:hover': { bgcolor: '#4338ca' },
          color: '#ffffff',
          fontSize: '0.875rem',
          px: 2,
          py: 1,
          borderRadius: 1,
        }}
      >
        {loading ? 'Fetching User...' : 'Generate PDF'}
      </Button>
    </Box>
  );
};

PaymentReceiptPDF.propTypes = {
  amount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  membership_type: PropTypes.string.isRequired,
  payment_status: PropTypes.string.isRequired,
  transaction_id: PropTypes.string.isRequired,
  user_id: PropTypes.string.isRequired,
};

export default PaymentReceiptPDF;